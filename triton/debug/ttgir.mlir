#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:89", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_split_k_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<32x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = tt.get_program_id z : i32 loc(#loc4)
    %3 = arith.muli %2, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %5 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %6 = arith.extsi %arg3 : i32 to i64 loc(#loc8)
    %7 = arith.extsi %arg5 : i32 to i64 loc(#loc8)
    %8 = arith.extsi %arg6 : i32 to i64 loc(#loc8)
    %9 = arith.extsi %4 : i32 to i64 loc(#loc8)
    %10 = arith.extsi %3 : i32 to i64 loc(#loc8)
    %11 = arith.extsi %arg4 : i32 to i64 loc(#loc9)
    %12 = arith.extsi %arg7 : i32 to i64 loc(#loc9)
    %13 = arith.extsi %5 : i32 to i64 loc(#loc9)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %15 = tt.splat %9 : i64 -> tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %19 = arith.extsi %16 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %20 = arith.extsi %18 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %21 = arith.addi %15, %19 : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc10)
    %23 = tt.splat %8 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc10)
    %24 = arith.muli %22, %23 : tensor<64x1xi64, #blocked1> loc(#loc10)
    %25 = tt.broadcast %24 : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc10)
    %26 = tt.splat %10 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc10)
    %27 = tt.splat %10 : i64 -> tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc10)
    %29 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %30 = arith.extsi %28 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc10)
    %31 = arith.extsi %29 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %32 = arith.addi %26, %30 : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc10)
    %33 = arith.addi %27, %31 : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %34 = tt.expand_dims %32 {axis = 0 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc10)
    %35 = tt.broadcast %34 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc10)
    %36 = arith.addi %25, %35 : tensor<64x32xi64, #blocked1> loc(#loc10)
    %37 = tt.addptr %14, %36 : tensor<64x32x!tt.ptr<f32>, #blocked1>, tensor<64x32xi64, #blocked1> loc(#loc10)
    %38 = arith.cmpi sge, %22, %cst_5 : tensor<64x1xi64, #blocked1> loc(#loc10)
    %39 = tt.splat %6 : i64 -> tensor<64x1xi64, #blocked1> loc(#loc10)
    %40 = arith.cmpi slt, %22, %39 : tensor<64x1xi64, #blocked1> loc(#loc10)
    %41 = arith.andi %38, %40 : tensor<64x1xi1, #blocked1> loc(#loc10)
    %42 = tt.broadcast %41 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc10)
    %43 = arith.cmpi sge, %34, %cst_4 : tensor<1x32xi64, #blocked1> loc(#loc10)
    %44 = tt.splat %7 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc10)
    %45 = arith.cmpi slt, %34, %44 : tensor<1x32xi64, #blocked1> loc(#loc10)
    %46 = arith.andi %43, %45 : tensor<1x32xi1, #blocked1> loc(#loc10)
    %47 = tt.broadcast %46 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc10)
    %48 = arith.andi %42, %47 : tensor<64x32xi1, #blocked1> loc(#loc10)
    %49 = tt.load %37, %48, %cst_1 : tensor<64x32x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %50 = triton_gpu.local_alloc %49 : (tensor<64x32xf32, #blocked1>) -> !tt.memdesc<64x32xf32, #shared> loc(#loc10)
    %51 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %52 = tt.expand_dims %33 {axis = 1 : i32} : tensor<32xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc11)
    %53 = tt.splat %12 : i64 -> tensor<32x1xi64, #blocked> loc(#loc11)
    %54 = arith.muli %52, %53 : tensor<32x1xi64, #blocked> loc(#loc11)
    %55 = tt.broadcast %54 : tensor<32x1xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc11)
    %56 = tt.splat %13 : i64 -> tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %57 = arith.addi %56, %20 : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %58 = tt.expand_dims %57 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc11)
    %59 = tt.broadcast %58 : tensor<1x64xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc11)
    %60 = arith.addi %55, %59 : tensor<32x64xi64, #blocked> loc(#loc11)
    %61 = tt.addptr %51, %60 : tensor<32x64x!tt.ptr<f32>, #blocked>, tensor<32x64xi64, #blocked> loc(#loc11)
    %62 = arith.cmpi sge, %52, %cst_3 : tensor<32x1xi64, #blocked> loc(#loc11)
    %63 = tt.splat %7 : i64 -> tensor<32x1xi64, #blocked> loc(#loc11)
    %64 = arith.cmpi slt, %52, %63 : tensor<32x1xi64, #blocked> loc(#loc11)
    %65 = arith.andi %62, %64 : tensor<32x1xi1, #blocked> loc(#loc11)
    %66 = tt.broadcast %65 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc11)
    %67 = arith.cmpi sge, %58, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc11)
    %68 = tt.splat %11 : i64 -> tensor<1x64xi64, #blocked> loc(#loc11)
    %69 = arith.cmpi slt, %58, %68 : tensor<1x64xi64, #blocked> loc(#loc11)
    %70 = arith.andi %67, %69 : tensor<1x64xi1, #blocked> loc(#loc11)
    %71 = tt.broadcast %70 : tensor<1x64xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc11)
    %72 = arith.andi %66, %71 : tensor<32x64xi1, #blocked> loc(#loc11)
    %73 = tt.load %61, %72, %cst_0 : tensor<32x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %74 = triton_gpu.local_alloc %73 : (tensor<32x64xf32, #blocked>) -> !tt.memdesc<32x64xf32, #shared1> loc(#loc11)
    %75 = triton_gpu.local_load %50 : !tt.memdesc<64x32xf32, #shared> -> tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc10)
    %76 = triton_gpu.local_load %74 : !tt.memdesc<32x64xf32, #shared1> -> tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc11)
    %77 = tt.dot %75, %76, %cst, inputPrecision = tf32 : tensor<64x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<32x64xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<64x64xf32, #mma> loc(#loc12)
    %78 = tt.splat %4 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %79 = arith.addi %78, %17 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %80 = tt.splat %5 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %81 = arith.addi %80, %18 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %82 = tt.expand_dims %79 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %83 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked> loc(#loc16)
    %84 = arith.muli %82, %83 : tensor<64x1xi32, #blocked> loc(#loc16)
    %85 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %86 = tt.addptr %85, %84 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
    %87 = tt.expand_dims %81 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
    %88 = tt.broadcast %86 : tensor<64x1x!tt.ptr<f32>, #blocked> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %89 = tt.broadcast %87 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %90 = tt.addptr %88, %89 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
    %91 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %92 = arith.cmpi slt, %82, %91 : tensor<64x1xi32, #blocked> loc(#loc20)
    %93 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc21)
    %94 = arith.cmpi slt, %87, %93 : tensor<1x64xi32, #blocked> loc(#loc21)
    %95 = tt.broadcast %92 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc22)
    %96 = tt.broadcast %94 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc22)
    %97 = arith.andi %95, %96 : tensor<64x64xi1, #blocked> loc(#loc22)
    %98 = triton_gpu.convert_layout %77 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked> loc(#loc23)
    %99 = tt.atomic_rmw fadd, acq_rel, gpu, %90, %98, %97 : (tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xi1, #blocked>) -> tensor<64x64xf32, #blocked> loc(#loc23)
    tt.return loc(#loc24)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":25:26)
#loc3 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":26:26)
#loc4 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":27:26)
#loc5 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":30:20)
#loc6 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":31:20)
#loc7 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":32:20)
#loc8 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":41:8)
#loc9 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":49:8)
#loc10 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":53:16)
#loc11 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":54:16)
#loc12 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":57:20)
#loc13 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":60:21)
#loc14 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":61:21)
#loc15 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:28)
#loc16 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:39)
#loc17 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:21)
#loc18 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:58)
#loc19 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:51)
#loc20 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:30)
#loc21 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:54)
#loc22 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:36)
#loc23 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:26)
#loc24 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:4)
