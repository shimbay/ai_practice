#loc = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)
module {
  tt.func public @matmul_split_k_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %2 = tt.get_program_id z : i32 loc(#loc3)
    %c32_i32 = arith.constant 32 : i32 loc(#loc4)
    %3 = arith.muli %2, %c32_i32 : i32 loc(#loc4)
    %c64_i32 = arith.constant 64 : i32 loc(#loc5)
    %4 = arith.muli %0, %c64_i32 : i32 loc(#loc5)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc6)
    %5 = arith.muli %1, %c64_i32_0 : i32 loc(#loc6)
    %6 = arith.extsi %arg3 : i32 to i64 loc(#loc7)
    %7 = arith.extsi %arg5 : i32 to i64 loc(#loc7)
    %8 = arith.extsi %arg6 : i32 to i64 loc(#loc7)
    %c1_i64 = arith.constant 1 : i64 loc(#loc7)
    %9 = tt.make_tensor_ptr %arg0, [%6, %7], [%8, %c1_i64], [%4, %3] {order = array<i32: 1, 0>} : <tensor<64x32xf32>> loc(#loc7)
    %10 = arith.extsi %arg5 : i32 to i64 loc(#loc8)
    %11 = arith.extsi %arg4 : i32 to i64 loc(#loc8)
    %12 = arith.extsi %arg7 : i32 to i64 loc(#loc8)
    %c1_i64_1 = arith.constant 1 : i64 loc(#loc8)
    %13 = tt.make_tensor_ptr %arg1, [%10, %11], [%12, %c1_i64_1], [%3, %5] {order = array<i32: 1, 0>} : <tensor<32x64xf32>> loc(#loc8)
    %14 = tt.load %9 {boundaryCheck = array<i32: 0, 1>, padding = 1 : i32} : !tt.ptr<tensor<64x32xf32>> loc(#loc9)
    %15 = tt.load %13 {boundaryCheck = array<i32: 0, 1>, padding = 1 : i32} : !tt.ptr<tensor<32x64xf32>> loc(#loc10)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc11)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc11)
    %16 = tt.dot %14, %15, %cst_2, inputPrecision = tf32 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc11)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc12)
    %18 = tt.splat %4 : i32 -> tensor<64xi32> loc(#loc13)
    %19 = arith.addi %18, %17 : tensor<64xi32> loc(#loc13)
    %20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc14)
    %21 = tt.splat %5 : i32 -> tensor<64xi32> loc(#loc15)
    %22 = arith.addi %21, %20 : tensor<64xi32> loc(#loc15)
    %23 = tt.expand_dims %19 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc16)
    %24 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc17)
    %25 = arith.muli %23, %24 : tensor<64x1xi32> loc(#loc17)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc18)
    %27 = tt.addptr %26, %25 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc18)
    %28 = tt.expand_dims %22 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc19)
    %c1_i32 = arith.constant 1 : i32 loc(#loc20)
    %cst_3 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc20)
    %29 = arith.muli %28, %cst_3 : tensor<1x64xi32> loc(#loc20)
    %30 = tt.broadcast %27 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc21)
    %31 = tt.broadcast %29 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc21)
    %32 = tt.addptr %30, %31 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc21)
    %33 = tt.expand_dims %19 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc22)
    %34 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc23)
    %35 = arith.cmpi slt, %33, %34 : tensor<64x1xi32> loc(#loc23)
    %36 = tt.expand_dims %22 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc24)
    %37 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc25)
    %38 = arith.cmpi slt, %36, %37 : tensor<1x64xi32> loc(#loc25)
    %39 = tt.broadcast %35 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc26)
    %40 = tt.broadcast %38 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc26)
    %41 = arith.andi %39, %40 : tensor<64x64xi1> loc(#loc26)
    %42 = tt.atomic_rmw fadd, acq_rel, gpu, %32, %16, %41 : (tensor<64x64x!tt.ptr<f32>>, tensor<64x64xf32>, tensor<64x64xi1>) -> tensor<64x64xf32> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":25:26)
#loc2 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":26:26)
#loc3 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":27:26)
#loc4 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":30:20)
#loc5 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":31:20)
#loc6 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":32:20)
#loc7 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":41:8)
#loc8 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":49:8)
#loc9 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":53:16)
#loc10 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":54:16)
#loc11 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":57:20)
#loc12 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":60:34)
#loc13 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":60:21)
#loc14 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":61:34)
#loc15 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":61:21)
#loc16 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:28)
#loc17 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:39)
#loc18 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:21)
#loc19 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:58)
#loc20 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:69)
#loc21 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:51)
#loc22 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:19)
#loc23 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:30)
#loc24 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:43)
#loc25 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:54)
#loc26 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:36)
#loc27 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:26)
#loc28 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:4)
