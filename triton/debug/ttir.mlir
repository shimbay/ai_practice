#loc = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)
module {
  tt.func public @matmul_split_k_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":7:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x64xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<32x1xi64> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x32xi64> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<64x1xi64> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = tt.get_program_id z : i32 loc(#loc4)
    %3 = arith.muli %2, %c32_i32 : i32 loc(#loc5)
    %4 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %5 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %6 = arith.extsi %arg3 : i32 to i64 loc(#loc8)
    %7 = arith.extsi %arg5 : i32 to i64 loc(#loc8)
    %8 = arith.extsi %arg6 : i32 to i64 loc(#loc8)
    %9 = arith.extsi %4 : i32 to i64 loc(#loc8)
    %10 = arith.extsi %3 : i32 to i64 loc(#loc8)
    %11 = arith.extsi %arg4 : i32 to i64 loc(#loc9)
    %12 = arith.extsi %arg7 : i32 to i64 loc(#loc9)
    %13 = arith.extsi %5 : i32 to i64 loc(#loc9)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x32x!tt.ptr<f32>> loc(#loc10)
    %15 = tt.splat %9 : i64 -> tensor<64xi64> loc(#loc10)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc10)
    %17 = arith.extsi %16 : tensor<64xi32> to tensor<64xi64> loc(#loc10)
    %18 = arith.addi %15, %17 : tensor<64xi64> loc(#loc10)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc10)
    %20 = tt.splat %8 : i64 -> tensor<64x1xi64> loc(#loc10)
    %21 = arith.muli %19, %20 : tensor<64x1xi64> loc(#loc10)
    %22 = tt.broadcast %21 : tensor<64x1xi64> -> tensor<64x32xi64> loc(#loc10)
    %23 = tt.splat %10 : i64 -> tensor<32xi64> loc(#loc10)
    %24 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %25 = arith.extsi %24 : tensor<32xi32> to tensor<32xi64> loc(#loc10)
    %26 = arith.addi %23, %25 : tensor<32xi64> loc(#loc10)
    %27 = tt.expand_dims %26 {axis = 0 : i32} : tensor<32xi64> -> tensor<1x32xi64> loc(#loc10)
    %28 = tt.broadcast %27 : tensor<1x32xi64> -> tensor<64x32xi64> loc(#loc10)
    %29 = arith.addi %22, %28 : tensor<64x32xi64> loc(#loc10)
    %30 = tt.addptr %14, %29 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi64> loc(#loc10)
    %31 = arith.cmpi sge, %19, %cst_4 : tensor<64x1xi64> loc(#loc10)
    %32 = tt.splat %6 : i64 -> tensor<64x1xi64> loc(#loc10)
    %33 = arith.cmpi slt, %19, %32 : tensor<64x1xi64> loc(#loc10)
    %34 = arith.andi %31, %33 : tensor<64x1xi1> loc(#loc10)
    %35 = tt.broadcast %34 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc10)
    %36 = arith.cmpi sge, %27, %cst_3 : tensor<1x32xi64> loc(#loc10)
    %37 = tt.splat %7 : i64 -> tensor<1x32xi64> loc(#loc10)
    %38 = arith.cmpi slt, %27, %37 : tensor<1x32xi64> loc(#loc10)
    %39 = arith.andi %36, %38 : tensor<1x32xi1> loc(#loc10)
    %40 = tt.broadcast %39 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc10)
    %41 = arith.andi %35, %40 : tensor<64x32xi1> loc(#loc10)
    %42 = tt.load %30, %41, %cst_2 : tensor<64x32x!tt.ptr<f32>> loc(#loc10)
    %43 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x64x!tt.ptr<f32>> loc(#loc11)
    %44 = tt.expand_dims %26 {axis = 1 : i32} : tensor<32xi64> -> tensor<32x1xi64> loc(#loc11)
    %45 = tt.splat %12 : i64 -> tensor<32x1xi64> loc(#loc11)
    %46 = arith.muli %44, %45 : tensor<32x1xi64> loc(#loc11)
    %47 = tt.broadcast %46 : tensor<32x1xi64> -> tensor<32x64xi64> loc(#loc11)
    %48 = tt.splat %13 : i64 -> tensor<64xi64> loc(#loc11)
    %49 = arith.addi %48, %17 : tensor<64xi64> loc(#loc11)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<64xi64> -> tensor<1x64xi64> loc(#loc11)
    %51 = tt.broadcast %50 : tensor<1x64xi64> -> tensor<32x64xi64> loc(#loc11)
    %52 = arith.addi %47, %51 : tensor<32x64xi64> loc(#loc11)
    %53 = tt.addptr %43, %52 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi64> loc(#loc11)
    %54 = arith.cmpi sge, %44, %cst_1 : tensor<32x1xi64> loc(#loc11)
    %55 = tt.splat %7 : i64 -> tensor<32x1xi64> loc(#loc11)
    %56 = arith.cmpi slt, %44, %55 : tensor<32x1xi64> loc(#loc11)
    %57 = arith.andi %54, %56 : tensor<32x1xi1> loc(#loc11)
    %58 = tt.broadcast %57 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc11)
    %59 = arith.cmpi sge, %50, %cst_0 : tensor<1x64xi64> loc(#loc11)
    %60 = tt.splat %11 : i64 -> tensor<1x64xi64> loc(#loc11)
    %61 = arith.cmpi slt, %50, %60 : tensor<1x64xi64> loc(#loc11)
    %62 = arith.andi %59, %61 : tensor<1x64xi1> loc(#loc11)
    %63 = tt.broadcast %62 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc11)
    %64 = arith.andi %58, %63 : tensor<32x64xi1> loc(#loc11)
    %65 = tt.load %53, %64, %cst : tensor<32x64x!tt.ptr<f32>> loc(#loc11)
    %66 = tt.dot %42, %65, %cst_5, inputPrecision = tf32 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc12)
    %67 = tt.splat %4 : i32 -> tensor<64xi32> loc(#loc13)
    %68 = arith.addi %67, %16 : tensor<64xi32> loc(#loc13)
    %69 = tt.splat %5 : i32 -> tensor<64xi32> loc(#loc14)
    %70 = arith.addi %69, %16 : tensor<64xi32> loc(#loc14)
    %71 = tt.expand_dims %68 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc15)
    %72 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc16)
    %73 = arith.muli %71, %72 : tensor<64x1xi32> loc(#loc16)
    %74 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc17)
    %75 = tt.addptr %74, %73 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc17)
    %76 = tt.expand_dims %70 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc18)
    %77 = tt.broadcast %75 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc19)
    %78 = tt.broadcast %76 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc19)
    %79 = tt.addptr %77, %78 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc19)
    %80 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc20)
    %81 = arith.cmpi slt, %71, %80 : tensor<64x1xi32> loc(#loc20)
    %82 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc21)
    %83 = arith.cmpi slt, %76, %82 : tensor<1x64xi32> loc(#loc21)
    %84 = tt.broadcast %81 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc22)
    %85 = tt.broadcast %83 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc22)
    %86 = arith.andi %84, %85 : tensor<64x64xi1> loc(#loc22)
    %87 = tt.atomic_rmw fadd, acq_rel, gpu, %79, %66, %86 : (tensor<64x64x!tt.ptr<f32>>, tensor<64x64xf32>, tensor<64x64xi1>) -> tensor<64x64xf32> loc(#loc23)
    tt.return loc(#loc24)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":25:26)
#loc3 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":26:26)
#loc4 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":27:26)
#loc5 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":30:20)
#loc6 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":31:20)
#loc7 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":32:20)
#loc8 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":41:8)
#loc9 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":49:8)
#loc10 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":53:16)
#loc11 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":54:16)
#loc12 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":57:20)
#loc13 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":60:21)
#loc14 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":61:21)
#loc15 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:28)
#loc16 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:39)
#loc17 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:21)
#loc18 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:58)
#loc19 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":62:51)
#loc20 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:30)
#loc21 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:54)
#loc22 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":63:36)
#loc23 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:26)
#loc24 = loc("/data/sunyunbo/workspace/src/ai_practice/triton/main.py":66:4)
